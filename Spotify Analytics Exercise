--For this project, I downloaded Spotify data from Kaggle.
--Then I created a table to insert Spotify data into.
--Finally, I performed analytics on the data using SQL. 

--Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

--Then I inserted the Spotify Data .csv into the table.

--Next, I explored the data using the following SQL.

--First I found the average danceabilty of each artist.
SELECT artist_name, avg(danceability) as Avg
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY Avg DESC;

--Second I found the top 10 artists of the data set.
SELECT artist_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC LIMIT 10;

--Third I found the artist with the longest song.
SELECT artist_name, track_name, duration_ms
FROM BIT_DB.Spotifydata
ORDER BY duration_ms DESC LIMIT 1;

--Fourth I found the artist with the least average danceability
SELECT track_name, avg(danceability) as Avg_danceability
FROM BIT_DB.Spotifydata
GROUP BY track_name
ORDER BY Avg_danceability ASC LIMIT 1;

--Lastly I created a common table expression (CTE) to store the average popularity of the artists and then ran a query to output the ones with a rating of 90
or above and tagged them as a 'Top Star'.
WITH popTable AS (
    SELECT artist_name, avg(popularity) as Pop
    FROM Spotifydata
    GROUP BY artist_name
    )

SELECT artist_name, Pop, 'Top Star' AS tag
FROM popTable
WHERE Pop >= 90;
